kind: Service
apiVersion: v1
metadata:
  name: cloudquery-service
#  UnCOMMENT if internal
#  annotations: 
#      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  selector:
    app: cloudquery-web
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudquery-web
  labels:
    app: cloudquery-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudquery-web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1   # how many pods we can add at a time
      maxUnavailable: 1 # maxUnavailable define how many pods can be unavailable during the rolling update
  template:
    metadata:
      labels:
        app: cloudquery-web
    spec:
      containers:
      - name: cloudquery
        image: acrcbio.azurecr.io/cloudquery:latest ## TODO: REPLACE ME
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1000
          runAsGroup: 3000
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 1
            memory: 256Mi
          limits:
            cpu: 1
            memory: 1Gi 
        readinessProbe:
          httpGet:
            path: /Home/Contact
            port: 8080
          initialDelaySeconds: 3
          failureThreshold: 3
          periodSeconds: 5
          timeoutSeconds: 1
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          failureThreshold: 5
          periodSeconds: 12
          timeoutSeconds: 1
        volumeMounts:
        - name: sqlservice
          mountPath: "/etc/sqlservice"
          readOnly: true
      volumes:
      - name: sqlservice
        secret:
          secretName: sqlserver-query